name: Deploy to Staging

on:
  push:
    branches: [ staging ]
  pull_request:
    branches: [ main ] # Test staging build before production merge
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.24.0'
  JAVA_VERSION: '11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test --coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: staging
          fail_ci_if_error: false

  build-and-deploy:
    name: Build & Deploy Staging APK
    runs-on: ubuntu-latest
    needs: test
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Create Firebase options file
        run: |
          echo "${{ secrets.FIREBASE_OPTIONS_STAGING }}" > lib/firebase_options_staging.dart

      - name: Create google-services.json (Staging)
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON_STAGING }}" > android/app/src/staging/google-services.json

      - name: Build APK (Staging flavor - Release)
        run: flutter build apk --release --flavor staging -t lib/main_staging.dart

      - name: Upload Staging APK
        uses: actions/upload-artifact@v3
        with:
          name: yajid-staging-release
          path: build/app/outputs/flutter-apk/app-staging-release.apk

      # Optional: Deploy to Firebase App Distribution
      - name: Deploy to Firebase App Distribution
        if: github.event_name == 'push'
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID_STAGING }}
          token: ${{ secrets.FIREBASE_TOKEN }}
          groups: qa-team, stakeholders
          file: build/app/outputs/flutter-apk/app-staging-release.apk
          releaseNotes: |
            Staging build from commit: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            Commit message: ${{ github.event.head_commit.message }}

            Ready for QA testing and stakeholder review.

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-deploy
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Start Firebase Emulator
        run: |
          firebase emulators:start --only auth,firestore &
          sleep 10

      - name: Run integration tests
        run: flutter test integration_test/
        continue-on-error: true

      - name: Stop Firebase Emulator
        if: always()
        run: pkill -f "firebase emulators" || true

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [build-and-deploy, integration-tests]
    if: always()

    steps:
      - name: Send Slack notification
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Staging build ${{ job.status }}
            Commit: ${{ github.event.head_commit.message }}
            Author: ${{ github.event.head_commit.author.name }}
            Integration tests: ${{ needs.integration-tests.result }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
